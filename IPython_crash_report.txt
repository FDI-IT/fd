***************************************************************************

IPython post-mortem report

IPython version: 0.10 

BZR revision   : 1210 

Platform info  : os.name -> posix, sys.platform -> linux2

***************************************************************************

Current user configuration structure:

{'Version': 0,
 '__allownew': True,
 'alias': [],
 'args': [],
 'autocall': 1,
 'autoedit_syntax': 0,
 'autoexec': [],
 'autoindent': 0,
 'automagic': 1,
 'banner': 1,
 'c': '',
 'cache_size': 1000,
 'classic': 0,
 'color_info': 0,
 'colors': 'NoColor',
 'confirm_exit': 1,
 'debug': 0,
 'deep_reload': 0,
 'editor': '0',
 'execfile': [],
 'execute': [],
 'gthread': 0,
 'help': 0,
 'import_all': [],
 'import_mod': [],
 'import_some': [[]],
 'include': [],
 'interact': 0,
 'ipythondir': u'/var/www/.ipython',
 'log': 0,
 'logfile': '',
 'logplay': '',
 'magic_docstrings': 0,
 'messages': 1,
 'multi_line_specials': 1,
 'nosep': 0,
 'object_info_string_level': 0,
 'opts': Struct({'__allownew': True}),
 'pdb': 0,
 'pprint': 0,
 'profile': '',
 'prompt_in1': 'In [\\#]: ',
 'prompt_in2': '   .\\D.: ',
 'prompt_out': 'Out[\\#]: ',
 'prompts_pad_left': 1,
 'pydb': 0,
 'pylab': 0,
 'pylab_import_all': 1,
 'q4thread': 0,
 'qthread': 0,
 'quick': 0,
 'quiet': 0,
 'rcfile': 'ipythonrc',
 'readline': 1,
 'readline_merge_completions': 1,
 'readline_omit__names': 0,
 'readline_parse_and_bind': [],
 'readline_remove_delims': '',
 'screen_length': 0,
 'separate_in': '\n',
 'separate_out': '\n',
 'separate_out2': '',
 'system_header': 'IPython system call: ',
 'system_verbose': 0,
 'term_title': 1,
 'tk': 0,
 'upgrade': 0,
 'wildcards_case_sensitive': 1,
 'wthread': 0,
 'wxversion': '0',
 'xmode': 'Context'}

***************************************************************************

Crash traceback:

---------------------------------------------------------------------------
OSError                                       Python 2.6.5: /usr/bin/python
                                                   Fri Sep 24 18:29:44 2010
A problem occured executing Python code.  Here is the sequence of function
calls leading up to the error, with the most recent (innermost) call last.

/usr/local/django/fd/manage.py in <module>()
      1 
      2 
      3 
      4 
      5 
      6 #!/usr/bin/python
      7 from django.core.management import execute_manager
      8 try:
      9     import settings # Assumed to be in the same directory.
     10 except ImportError:
---> 11     import sys
        global execute_manager = <function execute_manager at 0x7fb8b6e395f0>
        global settings = <module 'settings' from '/usr/local/django/fd/settings.pyc'>
     12     sys.stderr.write("Error: Can't find the file 'settings.py' in the directory containing %r. It appears you've customized things.\nYou'll have to run django-admin.py, passing it your settings module.\n(If the file settings.py does indeed exist, it's causing an ImportError somehow.)\n" % __file__)
     13     sys.exit(1)
     14 
     15 if __name__ == "__main__":
     16     execute_manager(settings)
     17 
     18 
     19 
     20 
     21 
     22 
     23 
     24 
     25 
     26 
     27 
     28 
     29 
     30 
     31 

/usr/lib/pymodules/python2.6/django/core/management/__init__.pyc in execute_manager(settings_mod=<module 'settings' from '/usr/local/django/fd/settings.pyc'>, argv=None)
    347 
    348 def execute_from_command_line(argv=None):
    349     """
    350     A simple method that runs a ManagementUtility.
    351     """
    352     utility = ManagementUtility(argv)
    353     utility.execute()
    354 
    355 def execute_manager(settings_mod, argv=None):
    356     """
    357     Like execute_from_command_line(), but for use by manage.py, a
    358     project-specific django-admin.py utility.
    359     """
    360     setup_environ(settings_mod)
    361     utility = ManagementUtility(argv)
--> 362     utility.execute()
    363 
    364 
    365 
    366 
    367 
    368 
    369 
    370 
    371 
    372 
    373 
    374 
    375 
    376 
    377 

/usr/lib/pymodules/python2.6/django/core/management/__init__.pyc in execute(self=<django.core.management.ManagementUtility object>)
    288             if len(args) > 2:
    289                 self.fetch_command(args[2]).print_help(self.prog_name, args[2])
    290             else:
    291                 parser.print_lax_help()
    292                 sys.stderr.write(self.main_help_text() + '\n')
    293                 sys.exit(1)
    294         # Special-cases: We want 'django-admin.py --version' and
    295         # 'django-admin.py --help' to work, for backwards compatibility.
    296         elif self.argv[1:] == ['--version']:
    297             # LaxOptionParser already takes care of printing the version.
    298             pass
    299         elif self.argv[1:] == ['--help']:
    300             parser.print_lax_help()
    301             sys.stderr.write(self.main_help_text() + '\n')
    302         else:
--> 303             self.fetch_command(subcommand).run_from_argv(self.argv)
    304 
    305 def setup_environ(settings_mod, original_settings_path=None):
    306     """
    307     Configures the runtime environment. This can also be used by external
    308     scripts wanting to set up a similar environment to manage.py.
    309     Returns the project directory (assuming the passed settings module is
    310     directly in the project directory).
    311 
    312     The "original_settings_path" parameter is optional, but recommended, since
    313     trying to work out the original path from the module can be problematic.
    314     """
    315     # Add this project to sys.path so that it's importable in the conventional
    316     # way. For example, if this file (manage.py) lives in a directory
    317     # "myproject", this code would add "/path/to/myproject" to sys.path.
    318     if '__init__.py' in settings_mod.__file__:

/usr/lib/pymodules/python2.6/django/core/management/base.pyc in run_from_argv(self=<django.core.management.commands.shell.Command object>, argv=['manage.py', 'shell'])
    180         ``self.usage()``.
    181         
    182         """
    183         parser = self.create_parser(prog_name, subcommand)
    184         parser.print_help()
    185 
    186     def run_from_argv(self, argv):
    187         """
    188         Set up any environment changes requested (e.g., Python path
    189         and Django settings), then run this command.
    190         
    191         """
    192         parser = self.create_parser(argv[0], argv[1])
    193         options, args = parser.parse_args(argv[2:])
    194         handle_default_options(options)
--> 195         self.execute(*args, **options.__dict__)
        global app_labelsR = undefined
        global R = undefined
        global t = undefined
        global _ = undefined
        global app_labelt = undefined
        global app_listRI = undefined
        global RJ = undefined
        global RR = undefined
        global app_output = undefined
        global s = undefined
        global usr = undefined
        global lib = undefined
        global pymodules = undefined
        global python2 = undefined
        global django = <module 'django' from '/usr/lib/pymodules/python2.6/django/__init__.pyc'>
        global core = undefined
        global management = undefined
        global base.pyRC = undefined
        global s.c = undefined
        global K = undefined
        global d = undefined
        global S = undefined
        global Perform = undefined
        global the = undefined
        global command = undefined
        global actions = undefined
        global app = undefined
        global which = undefined
        global will = undefined
        global be = undefined
        global Python = undefined
        global module = undefined
        global corresponding = undefined
        global to = undefined
        global an = undefined
        global application = undefined
        global name = undefined
        global given = undefined
        global on = undefined
        global line.N = undefined
        global RV = undefined
        global A = undefined
        global takes = undefined
        global one = undefined
        global more = undefined
        global arbitrary = undefined
        global arguments = undefined
        global labels = undefined
        global line = undefined
        global does = undefined
        global something = undefined
        global each = undefined
        global of = undefined
        global them.Rather = undefined
        global than = undefined
        global implementing = undefined
        global handle = undefined
        global subclasses = undefined
        global must = undefined
        global implement = undefined
        global handle_label = undefined
        global called = undefined
        global once = undefined
        global label.If = undefined
        global should = undefined
        global names = undefined
        global installed = undefined
        global applications = undefined
        global use = undefined
        global AppCommand = <class 'django.core.management.base.AppCommand'>
        global instead.s = undefined
        global label = undefined
        global label...t = undefined
        global labelc = undefined
        global O = undefined
        global sl = undefined
        global p = undefined
        global i = undefined
        global n = undefined
        global g = undefined
        global x8 = undefined
        global D = undefined
        global o = undefined
        global q = undefined
        global Wd = undefined
        global Ns = undefined
        global Enter = undefined
        global at = undefined
        global least = undefined
        global s.s = undefined
        global Rf = undefined
        global handle_labelR = undefined
        global R_ = undefined
        global string = undefined
        global NoArgsCommandc = undefined
        global B = undefined
        global e = undefined
        global Z = undefined
        global RS = undefined
        global no = undefined
        global line.Rather = undefined
        global handle_noargs = undefined
        global itself = undefined
        global overridden = undefined
        global ensure = undefined
        global are = undefined
        global passed = undefined
        global command.Attempting = undefined
        global CommandError.R = undefined
        global c = undefined
        global Command = undefined
        global doesn = undefined
        global accept = undefined
        global any = undefined
        global this = undefined
        global actions.N = undefined
        global C = undefined
        global k = undefined
        global h = undefined
        global f = undefined
        global y = undefined
        global Wn = undefined
        global j = undefined
        global Xt = undefined
        global x = undefined
        global x5 = undefined
    196 
    197     def execute(self, *args, **options):
    198         """
    199         Try to execute this command, performing model validation if
    200         needed (as controlled by the attribute
    201         ``self.requires_model_validation``). If the command raises a
    202         ``CommandError``, intercept it and print it sensibly to
    203         stderr.
    204         
    205         """
    206         # Switch to English, because django-admin.py creates database content
    207         # like permissions, and those shouldn't contain any translations.
    208         # But only do this if we can assume we have a working settings file,
    209         # because django.utils.translation requires settings.
    210         if self.can_import_settings:

/usr/lib/pymodules/python2.6/django/core/management/base.pyc in execute(self=<django.core.management.commands.shell.Command object>, *args=(), **options={'plain': None, 'pythonpath': None, 'settings': None, 'traceback': None, 'verbosity': '1'})
    207         # like permissions, and those shouldn't contain any translations.
    208         # But only do this if we can assume we have a working settings file,
    209         # because django.utils.translation requires settings.
    210         if self.can_import_settings:
    211             try:
    212                 from django.utils import translation
    213                 translation.activate('en-us')
    214             except ImportError, e:
    215                 # If settings should be available, but aren't,
    216                 # raise the error and quit.
    217                 sys.stderr.write(self.style.ERROR(str('Error: %s\n' % e)))
    218                 sys.exit(1)
    219         try:
    220             if self.requires_model_validation:
    221                 self.validate()
--> 222             output = self.handle(*args, **options)
        global A = undefined
        global command = undefined
        global which = undefined
        global takes = undefined
        global no = undefined
        global arguments = undefined
        global on = undefined
        global the = undefined
        global line. = undefined
    223             if output:
    224                 if self.output_transaction:
    225                     # This needs to be imported here, because it relies on settings.
    226                     from django.db import connection
    227                     if connection.ops.start_transaction_sql():
    228                         print self.style.SQL_KEYWORD(connection.ops.start_transaction_sql())
    229                 print output
    230                 if self.output_transaction:
    231                     print self.style.SQL_KEYWORD("COMMIT;")
    232         except CommandError, e:
    233             sys.stderr.write(self.style.ERROR(str('Error: %s\n' % e)))
    234             sys.exit(1)
    235 
    236     def validate(self, app=None, display_num_errors=False):
    237         """

/usr/lib/pymodules/python2.6/django/core/management/base.pyc in handle(self=<django.core.management.commands.shell.Command object>, *args=(), **options={'plain': None, 'pythonpath': None, 'settings': None, 'traceback': None, 'verbosity': '1'})
    336     """
    337     A command which takes no arguments on the command line.
    338 
    339     Rather than implementing ``handle()``, subclasses must implement
    340     ``handle_noargs()``; ``handle()`` itself is overridden to ensure
    341     no arguments are passed to the command.
    342 
    343     Attempting to pass arguments will raise ``CommandError``.
    344     
    345     """
    346     args = ''
    347 
    348     def handle(self, *args, **options):
    349         if args:
    350             raise CommandError("Command doesn't accept any arguments")
--> 351         return self.handle_noargs(**options)
    352 
    353     def handle_noargs(self, **options):
    354         """
    355         Perform this command's actions.
    356         
    357         """
    358         raise NotImplementedError()
    359 
    360 def copy_helper(style, app_or_project, name, directory, other_name=''):
    361     """
    362     Copies either a Django application layout template or a Django project
    363     layout template into the specified directory.
    364 
    365     """
    366     # style -- A color style object (see django.core.management.color).

/usr/lib/pymodules/python2.6/django/core/management/commands/shell.pyc in handle_noargs(self=<django.core.management.commands.shell.Command object>, **options={'plain': None, 'pythonpath': None, 'settings': None, 'traceback': None, 'verbosity': '1'})
     14     def handle_noargs(self, **options):
     15         # XXX: (Temporary) workaround for ticket #1796: force early loading of all
     16         # models from installed apps.
     17         from django.db.models.loading import get_models
     18         loaded_models = get_models()
     19 
     20         use_plain = options.get('plain', False)
     21 
     22         try:
     23             if use_plain:
     24                 # Don't bother loading IPython, because the user wants plain Python.
     25                 raise ImportError
     26             import IPython
     27             # Explicitly pass an empty list as arguments, because otherwise IPython
     28             # would use sys.argv from this script.
---> 29             shell = IPython.Shell.IPShell(argv=[])
     30             shell.mainloop()
     31         except ImportError:
     32             import code
     33             # Set up a dictionary to serve as the environment for the shell, so
     34             # that tab completion works on objects that are imported at runtime.
     35             # See ticket 5082.
     36             imported_objects = {}
     37             try: # Try activating rlcompleter, because it's handy.
     38                 import readline
     39             except ImportError:
     40                 pass
     41             else:
     42                 # We don't have to wrap the following import in a 'try', because
     43                 # we already know 'readline' was imported successfully.
     44                 import rlcompleter

/usr/lib/pymodules/python2.6/IPython/Shell.pyc in __init__(self=<IPython.Shell.IPShell instance>, argv=[], user_ns=None, user_global_ns=None, debug=1, shell_class=<class 'IPython.iplib.InteractiveShell'>)
     58 # Default timeout for waiting for multithreaded shells (in seconds)
     59 GUI_TIMEOUT = 10
     60 
     61 #-----------------------------------------------------------------------------
     62 # This class is trivial now, but I want to have it in to publish a clean
     63 # interface. Later when the internals are reorganized, code that uses this
     64 # shouldn't have to change.
     65 
     66 class IPShell:
     67     """Create an IPython instance."""
     68     
     69     def __init__(self,argv=None,user_ns=None,user_global_ns=None,
     70                  debug=1,shell_class=InteractiveShell):
     71         self.IP = make_IPython(argv,user_ns=user_ns,
     72                                user_global_ns=user_global_ns,
---> 73                                debug=debug,shell_class=shell_class)
        global that = undefined
        global gets = undefined
        global prepended = undefined
        global to = undefined
        global all = undefined
        global calls = undefined
        global so = undefined
        global header = undefined
        global used = undefined
     74 
     75     def mainloop(self,sys_exit=0,banner=None):
     76         self.IP.mainloop(banner)
     77         if sys_exit:
     78             sys.exit()
     79 
     80 #-----------------------------------------------------------------------------
     81 def kill_embedded(self,parameter_s=''):
     82     """%kill_embedded : deactivate for good the current embedded IPython.
     83 
     84     This function (after asking for confirmation) sets an internal flag so that
     85     an embedded IPython will never activate again.  This is useful to
     86     permanently disable a shell that is being called inside a loop: once you've
     87     figured out what you needed from it, you may then kill it and the program
     88     will then continue to run without the interactive shell interfering again.

/usr/lib/pymodules/python2.6/IPython/ipmaker.pyc in make_IPython(argv=[], user_ns=None, user_global_ns=None, debug=1, rc_override=None, shell_class=<class 'IPython.iplib.InteractiveShell'>, embedded=False, **kw={})
    506     # tweaks. Basically options which affect other options. I guess this
    507     # should just be written so that options are fully orthogonal and we
    508     # wouldn't worry about this stuff!
    509 
    510     if IP_rc.classic:
    511         IP_rc.quick = 1
    512         IP_rc.cache_size = 0
    513         IP_rc.pprint = 0
    514         IP_rc.prompt_in1 = '>>> '
    515         IP_rc.prompt_in2 = '... '
    516         IP_rc.prompt_out = ''
    517         IP_rc.separate_in = IP_rc.separate_out = IP_rc.separate_out2 = '0'
    518         IP_rc.colors = 'NoColor'
    519         IP_rc.xmode = 'Plain'
    520 
--> 521     IP.pre_config_initialization()
    522     # configure readline
    523 
    524     # update exception handlers with rc file status
    525     otrap.trap_out()  # I don't want these messages ever.
    526     IP.magic_xmode(IP_rc.xmode)
    527     otrap.release_out()
    528 
    529     # activate logging if requested and not reloading a log
    530     if IP_rc.logplay:
    531         IP.magic_logstart(IP_rc.logplay + ' append')
    532     elif  IP_rc.logfile:
    533         IP.magic_logstart(IP_rc.logfile)
    534     elif IP_rc.log:
    535         IP.magic_logstart()
    536 

/usr/lib/pymodules/python2.6/IPython/iplib.pyc in pre_config_initialization(self=<IPython.iplib.InteractiveShell object>)
    820                           self.user_ns,  # globals
    821                           # Skip our own frame in searching for locals:
    822                           sys._getframe(depth+1).f_locals # locals
    823                           ))
    824 
    825     def pre_config_initialization(self):
    826         """Pre-configuration init method
    827 
    828         This is called before the configuration files are processed to
    829         prepare the services the config files might need.
    830         
    831         self.rc already has reasonable default values at this point.
    832         """
    833         rc = self.rc
    834         try:
--> 835             self.db = pickleshare.PickleShareDB(rc.ipythondir + "/db")
        global The = undefined
        global input = undefined
        global complete = undefined
        global compile_command = undefined
        global returned = undefined
        global a = undefined
        global code = undefined
    836         except exceptions.UnicodeDecodeError:
    837             print "Your ipythondir can't be decoded to unicode!"
    838             print "Please set HOME environment variable to something that"
    839             print r"only has ASCII characters, e.g. c:\home"
    840             print "Now it is",rc.ipythondir
    841             sys.exit()
    842         self.shadowhist = IPython.history.ShadowHist(self.db)
    843 
    844     def post_config_initialization(self):
    845         """Post configuration init method
    846 
    847         This is called after the configuration files have been processed to
    848         'finalize' the initialization."""
    849 
    850         rc = self.rc

/usr/lib/pymodules/python2.6/IPython/Extensions/pickleshare.pyc in __init__(self=PickleShareDB('/var/www/.ipython/db'), root=u'/var/www/.ipython/db')
     39 import UserDict
     40 import warnings
     41 import glob
     42 
     43 def gethashfile(key):
     44     return ("%02x" % abs(hash(key) % 256))[-2:]
     45 
     46 _sentinel = object()
     47 
     48 class PickleShareDB(UserDict.DictMixin):
     49     """ The main 'connection' object for PickleShare database """
     50     def __init__(self,root):
     51         """ Return a db object that will manage the specied directory"""
     52         self.root = Path(root).expanduser().abspath()
     53         if not self.root.isdir():
---> 54             self.root.makedirs()
        global t = undefined
        global hashrootR = undefined
        global R = undefined
        global hroott = undefined
        global hfilet = undefined
        global d = undefined
        global s = undefined
        global usr = undefined
        global lib = undefined
        global pymodules = undefined
        global python2 = undefined
        global IPython = undefined
        global Extensions = undefined
        global pickleshare.pyt = undefined
        global hset = undefined
        global c = undefined
        global C = undefined
        global i = undefined
        global j = undefined
        global o = undefined
        global _sentinelR = undefined
        global hdict = undefined
        global defaultt = undefined
        global fast_onlyR = undefined
        global hgetg = undefined
        global p = undefined
        global g = undefined
        global n = undefined
        global h = undefined
        global xZ = undefined
        global D = undefined
        global y = undefined
        global Wn = undefined
     55         # cache has { 'key' : (obj, orig_mod_time) }
     56         self.cache = {}
     57         
     58 
     59     def __getitem__(self,key):
     60         """ db['key'] reading """
     61         fil = self.root / key
     62         try:
     63             mtime = (fil.stat()[stat.ST_MTIME])
     64         except OSError:
     65             raise KeyError(key)
     66 
     67         if fil in self.cache and mtime == self.cache[fil][1]:
     68             return self.cache[fil][0]
     69         try:

/usr/lib/pymodules/python2.6/IPython/external/path.pyc in makedirs(self=path('/var/www/.ipython/db'), mode=511)
    878             os.chown(self, uid, gid)
    879 
    880     def rename(self, new):
    881         os.rename(self, new)
    882 
    883     def renames(self, new):
    884         os.renames(self, new)
    885 
    886 
    887     # --- Create/delete operations on directories
    888 
    889     def mkdir(self, mode=0777):
    890         os.mkdir(self, mode)
    891 
    892     def makedirs(self, mode=0777):
--> 893         os.makedirs(self, mode)
    894 
    895     def rmdir(self):
    896         os.rmdir(self)
    897 
    898     def removedirs(self):
    899         os.removedirs(self)
    900 
    901 
    902     # --- Modifying operations on files
    903 
    904     def touch(self):
    905         """ Set the access/modified times of this file to the current time.
    906         Create the file if it does not exist.
    907         """
    908         fd = os.open(self, os.O_WRONLY | os.O_CREAT, 0666)

/usr/lib/python2.6/os.pyc in makedirs(name=path('/var/www/.ipython/db'), mode=511)
    135 
    136 def makedirs(name, mode=0777):
    137     """makedirs(path [, mode=0777])
    138 
    139     Super-mkdir; create a leaf directory and all intermediate ones.
    140     Works like mkdir, except that any intermediate path segment (not
    141     just the rightmost) will be created if it does not exist.  This is
    142     recursive.
    143 
    144     """
    145     head, tail = path.split(name)
    146     if not tail:
    147         head, tail = path.split(head)
    148     if head and tail and not path.exists(head):
    149         try:
--> 150             makedirs(head, mode)
        global os = undefined
    151         except OSError, e:
    152             # be happy if someone already created the path
    153             if e.errno != errno.EEXIST:
    154                 raise
    155         if tail == curdir:           # xxx/newdir/. exists if xxx/newdir exists
    156             return
    157     mkdir(name, mode)
    158 
    159 def removedirs(name):
    160     """removedirs(path)
    161 
    162     Super-rmdir; remove a leaf directory and all empty intermediate
    163     ones.  Works like rmdir except that, if the leaf directory is
    164     successfully removed, directories corresponding to rightmost path
    165     segments will be pruned away until either the whole path is

/usr/lib/python2.6/os.pyc in makedirs(name='/var/www/.ipython', mode=511)
    142     recursive.
    143 
    144     """
    145     head, tail = path.split(name)
    146     if not tail:
    147         head, tail = path.split(head)
    148     if head and tail and not path.exists(head):
    149         try:
    150             makedirs(head, mode)
    151         except OSError, e:
    152             # be happy if someone already created the path
    153             if e.errno != errno.EEXIST:
    154                 raise
    155         if tail == curdir:           # xxx/newdir/. exists if xxx/newdir exists
    156             return
--> 157     mkdir(name, mode)
        global dirs.remove = undefined
    158 
    159 def removedirs(name):
    160     """removedirs(path)
    161 
    162     Super-rmdir; remove a leaf directory and all empty intermediate
    163     ones.  Works like rmdir except that, if the leaf directory is
    164     successfully removed, directories corresponding to rightmost path
    165     segments will be pruned away until either the whole path is
    166     consumed or an error occurs.  Errors during this latter phase are
    167     ignored -- they generally mean that a directory was not empty.
    168 
    169     """
    170     rmdir(name)
    171     head, tail = path.split(name)
    172     if not tail:

OSError: [Errno 13] Permission denied: '/var/www/.ipython'

***************************************************************************

History of session input:

*** Last line of input (may not be in above history):
