# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2020-02-25 13:13
from __future__ import unicode_literals

import access.models
import datetime
from decimal import Decimal
from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('newqc', '__first__'),
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('hazards', '__first__'),
        ('salesorders', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.CharField(default=b'', max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='AntisepticIngredient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pin', models.PositiveSmallIntegerField()),
                ('concentration', models.PositiveSmallIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='COA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_path', models.CharField(blank=True, max_length=1000, null=True)),
                ('date', models.DateField(blank=True, null=True, verbose_name=b'Date')),
                ('supercedes', models.CharField(blank=True, max_length=100, null=True)),
                ('product_name', models.CharField(blank=True, max_length=100, null=True)),
                ('product_number', models.CharField(blank=True, max_length=100, null=True)),
                ('specification_code', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Specification Code')),
                ('solubility', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Solubility')),
                ('specific_gravity', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Specific Gravity')),
                ('flash_point', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Flash Point')),
                ('sieve', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Sieve')),
                ('moisture', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Moisture')),
                ('fat_content', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Fat Content')),
                ('salt_content', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Salt Content')),
                ('brix', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Brix')),
                ('bostwick_consistometer', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Bostwick Consistometer')),
                ('ph', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'PH Level')),
                ('water_activity', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Water Activity')),
                ('aerobic_plate_count', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Aerobic Plate Count')),
                ('escherichia_coli', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Escherichia Coli')),
                ('salmonella', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Salmonella')),
                ('yeast', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Yeast')),
                ('mold', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Mold')),
                ('listeria', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Listeria')),
                ('staphylococci', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Staphylococci')),
                ('coliforms', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Coliforms')),
                ('standard_plate_count', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Standard Plate Count')),
                ('description', models.CharField(blank=True, max_length=1000, null=True, verbose_name=b'Description')),
                ('ingredient_statement', models.CharField(blank=True, max_length=1000, null=True, verbose_name=b'Ingredient Statement')),
                ('shelf_life', models.CharField(blank=True, max_length=1000, null=True, verbose_name=b'Shelf Life')),
                ('storage', models.CharField(blank=True, max_length=1000, null=True, verbose_name=b'Storage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rpsupsnumber', models.PositiveSmallIntegerField(blank=True, db_column=b'RPS/UPSNumber', null=True)),
                ('companyname', models.CharField(db_column=b'CompanyName', max_length=60)),
                ('billingaddress', models.CharField(blank=True, db_column=b'BillingAddress', max_length=60, null=True)),
                ('billingaddress2', models.CharField(blank=True, db_column=b'BillingAddress2', max_length=60, null=True)),
                ('billingcity', models.CharField(blank=True, db_column=b'BillingCity', max_length=35, null=True)),
                ('billingstate', models.CharField(blank=True, db_column=b'BillingState', max_length=2, null=True)),
                ('billingzip', models.CharField(blank=True, db_column=b'BillingZip', max_length=10, null=True)),
                ('shipaddress', models.CharField(blank=True, db_column=b'ShipAddress', max_length=60, null=True)),
                ('shipaddress2', models.CharField(blank=True, db_column=b'ShipAddress2', max_length=20, null=True)),
                ('shipcity', models.CharField(blank=True, db_column=b'ShipCity', max_length=35, null=True)),
                ('shipstate', models.CharField(blank=True, db_column=b'ShipState', max_length=2, null=True)),
                ('shipzip', models.CharField(blank=True, db_column=b'ShipZip', max_length=10, null=True)),
                ('billingphone', models.CharField(blank=True, db_column=b'BillingPhone', max_length=24, null=True)),
                ('shipphone', models.CharField(blank=True, db_column=b'ShipPhone', max_length=24, null=True)),
                ('billingfax', models.CharField(blank=True, db_column=b'BillingFax', max_length=24, null=True)),
                ('shipfax', models.CharField(blank=True, db_column=b'ShipFax', max_length=24, null=True)),
                ('customernotes', models.TextField(blank=True, db_column=b'CustomerNotes', null=True)),
                ('customerid', models.CharField(blank=True, db_column=b'CustomerID', max_length=5, null=True)),
                ('salesperson', models.CharField(blank=True, db_column=b'Salesperson', max_length=20, null=True)),
                ('prefix', models.CharField(blank=True, db_column=b'Prefix', max_length=10, null=True)),
                ('accountingcode', models.CharField(blank=True, db_column=b'AccountingCode', max_length=10, null=True)),
                ('terms', models.CharField(blank=True, db_column=b'Terms', max_length=10, null=True)),
                ('country', models.CharField(blank=True, db_column=b'Country', max_length=20, null=True)),
                ('categoryid', models.PositiveIntegerField(blank=True, db_column=b'CategoryID', null=True)),
                ('fedex', models.CharField(blank=True, db_column=b'Fedex', max_length=11, null=True)),
                ('region', models.CharField(blank=True, db_column=b'Region', max_length=20, null=True)),
                ('extension', models.PositiveIntegerField(blank=True, db_column=b'Extension', null=True)),
                ('contactname', models.CharField(blank=True, db_column=b'ContactName', max_length=30)),
                ('gender', models.CharField(blank=True, db_column=b'Gender', max_length=4, null=True)),
                ('contacttitle', models.CharField(blank=True, db_column=b'ContactTitle', max_length=30, null=True)),
                ('address', models.CharField(blank=True, db_column=b'Address', max_length=60, null=True)),
                ('city', models.CharField(blank=True, db_column=b'City', max_length=25, null=True)),
                ('postalcode', models.CharField(blank=True, db_column=b'PostalCode', max_length=10, null=True)),
                ('phone', models.CharField(blank=True, db_column=b'Phone', max_length=24, null=True)),
                ('fax', models.CharField(blank=True, db_column=b'Fax', max_length=24, null=True)),
                ('homepage', models.CharField(blank=True, db_column=b'HomePage', max_length=50, null=True)),
                ('email', models.CharField(blank=True, db_column=b'EMail', max_length=50, null=True)),
                ('customertype', models.CharField(blank=True, db_column=b'CustomerType', max_length=10, null=True)),
            ],
            options={
                'ordering': ['companyname'],
                'db_table': 'Customers',
            },
        ),
        migrations.CreateModel(
            name='DigitizedFormula',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ingredient_id', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('raw_row', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Documents',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('doctype', models.CharField(choices=[(b'specsheet', b'Spec Sheet'), (b'sds', b'SDS'), (b'allergen', b'Allergen'), (b'nutri', b'Nutri'), (b'GMO', b'GMO'), (b'GPVC', b'GMO Project Verified Certificate'), (b'LOG', b'Letter Of Guarantee'), (b'natural', b'Natural'), (b'origin', b'Origin'), (b'vegan', b'Vegan'), (b'organic', b'Organic Compliance'), (b'organic_cert', b'Organic Certified'), (b'kosher', b'Kosher'), (b'halal', b'Halal'), (b'COA', b'Certificate of Analysis'), (b'COI', b'Certificate of Insurance'), (b'ingbreak', b'Ingredient Breakdown'), (b'form20', b'Form #020'), (b'form20ar', b'Form #020 Audit Report'), (b'form20c', b'Form #020 Certification'), (b'form40', b'Form #040')], default=b'', max_length=30)),
                ('uploadfile', models.FileField(upload_to=access.models.set_file_path)),
                ('expiration', models.DateField(blank=True, default=datetime.date.today, null=True)),
                ('documententry', models.DateField(default=datetime.date.today)),
                ('log_rms', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, default=b'', max_length=25, null=True), blank=True, default=[], null=True, size=None)),
            ],
        ),
        migrations.CreateModel(
            name='DocumentVerification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=datetime.date.today)),
                ('final', models.BooleanField(default=False)),
                ('expiration', models.DateField(default=None, null=True)),
                ('is_documentdate', models.BooleanField(default=True)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='verifications', to='access.Documents')),
                ('rm_retain', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='newqc.RMRetain')),
            ],
            options={
                'permissions': (('can_verify', 'Authorized to verify documents'),),
            },
        ),
        migrations.CreateModel(
            name='ExperimentalFormula',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=3, max_digits=7)),
            ],
        ),
        migrations.CreateModel(
            name='ExperimentalLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('experimentalnum', models.PositiveIntegerField(db_column=b'ExperimentalNum', unique=True)),
                ('datesent', models.DateTimeField(db_column=b'DateSent')),
                ('customer', models.CharField(db_column=b'Customer', max_length=50, null=True)),
                ('product_name', models.CharField(db_column=b'ProductName', max_length=100)),
                ('label_type', models.CharField(blank=True, max_length=50)),
                ('product_category', models.CharField(blank=True, choices=[(b'Solution', b'Solution'), (b'Reaction', b'Reaction'), (b'Emulsion', b'Emulsion'), (b'Concentrate', b'Concentrate'), (b'Syrup', b'Syrup'), (b'Syrup Base', b'Syrup Base'), (b'Flavored Syrup', b'Flavored Syrup'), (b'Spray Dry', b'Spray Dry'), (b'Rub', b'Rub'), (b'Spice Blend', b'Spice Blend'), (b'Base', b'Base'), (b'Powdered Flavor', b'Powdered Flavor'), (b'Flavorcoat', b'Flavorcoat')], max_length=100, null=True)),
                ('natart', models.CharField(blank=True, max_length=50)),
                ('initials', models.CharField(db_column=b'Initials', max_length=2)),
                ('memo', models.TextField(blank=True, db_column=b'Memo', null=True)),
                ('color', models.CharField(blank=True, max_length=50)),
                ('organoleptics', models.CharField(blank=True, max_length=50)),
                ('mixing_instructions', models.TextField(blank=True)),
                ('yield_field', models.PositiveIntegerField(blank=True, default=100, null=True, verbose_name=b'Percent Yield')),
                ('liquid', models.BooleanField(db_column=b'Liquid', default=False)),
                ('dry', models.BooleanField(db_column=b'Dry', default=False)),
                ('spraydried', models.BooleanField(db_column=b'Spray Dried', default=False)),
                ('flavorcoat', models.BooleanField(db_column=b'Flavor Coat', default=False, verbose_name='Flavorcoat\xae')),
                ('concentrate', models.BooleanField(db_column=b'Concentrate', default=False)),
                ('oilsoluble', models.BooleanField(db_column=b'OilSoluble', default=False, verbose_name=b'Oil soluble')),
                ('na', models.BooleanField(db_column=b'N/A', default=False, verbose_name=b'N/A')),
                ('natural', models.BooleanField(db_column=b'Natural', default=False)),
                ('artificial', models.BooleanField(default=False)),
                ('nfi', models.BooleanField(default=False, verbose_name=b'NFI')),
                ('nfi_n', models.BooleanField(default=False, verbose_name=b'NFI')),
                ('nfi_a', models.BooleanField(default=False, verbose_name=b'NFI')),
                ('ttb', models.BooleanField(default=False, verbose_name=b'TTB')),
                ('organic_compliant_required', models.BooleanField(db_column=b'Organic', default=False, verbose_name=b'Organic Compliant')),
                ('organic_certified_required', models.BooleanField(default=False, verbose_name=b'Organic Certified')),
                ('wonf', models.BooleanField(db_column=b'WONF', default=False, verbose_name=b'Natural WONF')),
                ('natural_type', models.BooleanField(default=False, verbose_name=b'Natural Type')),
                ('duplication', models.BooleanField(db_column=b'Duplication', default=False)),
                ('duplication_company', models.CharField(blank=True, max_length=50)),
                ('duplication_id', models.CharField(blank=True, max_length=50)),
                ('duplication_name', models.CharField(blank=True, max_length=50)),
                ('promotable', models.BooleanField(db_column=b'Promotable', default=False)),
                ('holiday', models.BooleanField(db_column=b'Holiday', default=False)),
                ('chef_assist', models.BooleanField(db_column=b'Chef Assist', default=False)),
                ('experimental_number', models.PositiveIntegerField(db_column=b'Experimental Number', default=0)),
                ('spg', models.DecimalField(db_column=b'SpG', decimal_places=3, default=0, max_digits=4)),
                ('flash', models.PositiveIntegerField(db_column=b'Flash', default=0)),
                ('usagelevel', models.DecimalField(db_column=b'UsageLevel', decimal_places=4, default=0, max_digits=6)),
                ('product_number', models.PositiveIntegerField(blank=True, db_column=b'ProductNumber', null=True)),
                ('coffee', models.BooleanField(db_column=b'Coffee', default=False)),
                ('tea', models.BooleanField(db_column=b'Tea', default=False)),
                ('fruit', models.BooleanField(db_column=b'Fruit', default=False)),
                ('sweet', models.BooleanField(db_column=b'Sweet', default=False)),
                ('nutraceutical', models.BooleanField(db_column=b'Nutraceutical', default=False)),
                ('personal_care', models.BooleanField(db_column=b'Personal Care', default=False)),
                ('meat_and_savory', models.BooleanField(db_column=b'Meat and Savory', default=False)),
                ('beverage', models.BooleanField(db_column=b'Beverage', default=False)),
                ('chai', models.BooleanField(db_column=b'Chai', default=False)),
                ('baked_goods', models.BooleanField(db_column=b'Baked Goods', default=False)),
                ('dairy', models.BooleanField(db_column=b'Dairy', default=False)),
                ('pet', models.BooleanField(db_column=b'Pet', default=False)),
                ('snacks', models.BooleanField(db_column=b'Snacks', default=False)),
                ('tobacco', models.BooleanField(db_column=b'Tobacco', default=False)),
                ('non_food', models.BooleanField(db_column=b'Non-Food', default=False)),
                ('retain_number', models.PositiveIntegerField(blank=True, db_column=b'RetainNumber', null=True)),
                ('retain_present', models.BooleanField(db_column=b'RetainPresent', default=False)),
                ('location_code_old', models.CharField(blank=True, default=b'', max_length=20)),
                ('exclude_from_reporting', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['experimentalnum'],
                'db_table': 'ExperimentalLog',
            },
        ),
        migrations.CreateModel(
            name='ExperimentalProduct',
            fields=[
                ('productid', models.PositiveIntegerField(db_column=b'ProductID', primary_key=True, serialize=False)),
                ('flavornumber', models.PositiveIntegerField(db_column=b'FlavorNumber')),
                ('product_name', models.CharField(db_column=b'ProductName', max_length=40)),
                ('productprefix', models.CharField(db_column=b'ProductPrefix', max_length=2)),
                ('flavorcode', models.CharField(db_column=b'FlavorCode', max_length=2)),
                ('flavornatart', models.CharField(db_column=b'FlavorNatArt', max_length=3)),
                ('flavortype', models.CharField(db_column=b'FlavorType', max_length=25)),
                ('categoryid', models.PositiveIntegerField(db_column=b'CategoryID')),
                ('unitprice', models.DecimalField(db_column=b'UnitPrice', decimal_places=3, max_digits=7)),
                ('quantityperunit', models.PositiveIntegerField(db_column=b'QuantityPerUnit')),
                ('supplierid', models.PositiveIntegerField(db_column=b'SupplierID')),
                ('unitsinstock', models.PositiveIntegerField(db_column=b'UnitsInStock')),
                ('unitsonorder', models.PositiveIntegerField(db_column=b'UnitsOnOrder')),
                ('reorderlevel', models.PositiveIntegerField(db_column=b'ReorderLevel')),
                ('discontinued', models.BooleanField(db_column=b'Discontinued', default=False)),
                ('approved', models.BooleanField(db_column=b'Approved', default=False)),
                ('productmemo', models.TextField(db_column=b'ProductMemo')),
                ('sold', models.BooleanField(db_column=b'Sold', default=False)),
                ('spraydried', models.BooleanField(db_column=b'SprayDried', default=False)),
                ('lastprice', models.DecimalField(db_column=b'LastPrice', decimal_places=3, max_digits=7)),
                ('experimental', models.CharField(db_column=b'Experimental', max_length=50)),
                ('lastspdate', models.DateTimeField(db_column=b'LastSPDate')),
            ],
            options={
                'db_table': 'Experimental Products',
            },
        ),
        migrations.CreateModel(
            name='FDIIngredientCategoryInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ld50', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hazards.HazardCategory')),
            ],
        ),
        migrations.CreateModel(
            name='Flavor',
            fields=[
                ('solvent', models.CharField(blank=True, max_length=50)),
                ('rawmaterialcost', models.DecimalField(blank=True, decimal_places=3, max_digits=7, null=True)),
                ('sulfites', models.BooleanField(default=False)),
                ('sulfites_ppm', models.DecimalField(blank=True, decimal_places=1, max_digits=6, null=True)),
                ('sulfites_usage_threshold', models.DecimalField(blank=True, decimal_places=3, max_digits=5, null=True)),
                ('fish', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Fish')),
                ('treenuts', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Treenuts')),
                ('crustacean', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Crustacean')),
                ('eggs', models.BooleanField(default=False)),
                ('milk', models.BooleanField(default=False)),
                ('peanuts', models.BooleanField(default=False)),
                ('soybeans', models.BooleanField(default=False)),
                ('wheat', models.BooleanField(default=False)),
                ('sunflower', models.BooleanField(default=False)),
                ('sesame', models.BooleanField(default=False)),
                ('mollusks', models.BooleanField(default=False)),
                ('mustard', models.BooleanField(default=False)),
                ('celery', models.BooleanField(default=False)),
                ('lupines', models.BooleanField(default=False)),
                ('yellow_5', models.BooleanField(default=False)),
                ('barley_gluten', models.BooleanField(default=False, verbose_name=b'Barley Gluten')),
                ('indivisible', models.BooleanField(default=False)),
                ('diacetyl', models.BooleanField(default=True, verbose_name=b'No Diacetyl')),
                ('no_pg', models.BooleanField(default=False, verbose_name=b'No PG')),
                ('flashpoint', models.PositiveIntegerField(default=0, verbose_name=b'Flash Point')),
                ('spg', models.DecimalField(decimal_places=3, default=0, max_digits=4)),
                ('stability', models.CharField(blank=True, default=b'', max_length=25)),
                ('allergen', models.CharField(blank=True, default=b'', max_length=100, verbose_name=b'Allergens')),
                ('yield_field', models.PositiveIntegerField(default=100, verbose_name=b'Percent Yield')),
                ('reactionextraction', models.BooleanField(default=False, verbose_name=b'Reaction/Extraction')),
                ('prop_65', models.CharField(blank=True, default=b'', max_length=50, verbose_name=b'Prop 65')),
                ('prop65', models.BooleanField(default=False)),
                ('ovo_vegan', models.BooleanField(default=False)),
                ('vegan', models.BooleanField(default=False)),
                ('organic', models.BooleanField(default=False)),
                ('wonf', models.BooleanField(default=False, verbose_name=b'Natural WONF')),
                ('natural_type', models.BooleanField(default=False, verbose_name=b'Natural Type')),
                ('liquid', models.BooleanField(default=False)),
                ('dry', models.BooleanField(default=False)),
                ('spraydried', models.BooleanField(default=False, verbose_name=b'Spray Dried')),
                ('flavorcoat', models.BooleanField(default=False, verbose_name='Flavorcoat\xae')),
                ('concentrate', models.BooleanField(default=False)),
                ('oilsoluble', models.BooleanField(default=False, verbose_name=b'Oil soluble')),
                ('id', models.PositiveIntegerField(default=access.models.get_next_flavorid, primary_key=True, serialize=False)),
                ('number', models.PositiveIntegerField(unique=True)),
                ('name', models.CharField(max_length=80)),
                ('prefix', models.CharField(max_length=2)),
                ('code', models.CharField(blank=True, max_length=3)),
                ('natart', models.CharField(blank=True, choices=[(b'N/A', b'N/A'), (b'Nat', b'Nat'), (b'Art', b'Art'), (b'NFI-N', b'NFI-N'), (b'NFI-A', b'NFI-A'), (b'Nat w/ 0.1% Art Topnote', b'TTB')], max_length=50)),
                ('label_type', models.CharField(blank=True, db_column=b'type', max_length=50)),
                ('phase', models.CharField(blank=True, choices=[(b'Liquid', b'Liquid'), (b'Powder', b'Powder'), (b'Undetermined', b'Undetermined')], default=b'Undetermined', max_length=100)),
                ('product_category', models.CharField(blank=True, choices=[(b'Solution', b'Solution'), (b'Reaction', b'Reaction'), (b'Emulsion', b'Emulsion'), (b'Concentrate', b'Concentrate'), (b'Syrup', b'Syrup'), (b'Syrup Base', b'Syrup Base'), (b'Flavored Syrup', b'Flavored Syrup'), (b'Spray Dry', b'Spray Dry'), (b'Rub', b'Rub'), (b'Spice Blend', b'Spice Blend'), (b'Base', b'Base'), (b'Powdered Flavor', b'Powdered Flavor'), (b'Flavorcoat', b'Flavorcoat')], max_length=100, null=True)),
                ('wonf_type', models.CharField(blank=True, choices=[(b'WONF', b'WONF'), (b'Type', b'Type')], max_length=100, null=True)),
                ('country_of_origin', models.CharField(blank=True, max_length=200, null=True)),
                ('organic_compliant', models.NullBooleanField()),
                ('organic_compliant_required', models.BooleanField(default=False, verbose_name=b'Organic Compliant Required')),
                ('organic_certified_required', models.BooleanField(default=False, verbose_name=b'Organic Certified Required')),
                ('organic_certification_number', models.CharField(blank=True, max_length=100, null=True)),
                ('solubility', models.CharField(blank=True, choices=[(b'Water', b'Water'), (b'Oil', b'Oil'), (b'Water Dispersable', b'Water Dispersable')], max_length=100, null=True)),
                ('unitprice', models.DecimalField(blank=True, decimal_places=3, max_digits=7, null=True)),
                ('productmemo', models.TextField(blank=True)),
                ('mixing_instructions', models.TextField(blank=True)),
                ('color', models.CharField(blank=True, max_length=200)),
                ('organoleptics', models.CharField(blank=True, max_length=50)),
                ('pricing_memo', models.TextField(blank=True)),
                ('entered', models.DateTimeField(auto_now_add=True)),
                ('supportive_potential', models.BooleanField(default=False)),
                ('risk_assessment_group', models.PositiveSmallIntegerField(choices=[(0, b'Antimicrobial'), (1, b'Regularly Monitored'), (2, b'Bacteriostatic/Non-Supportive'), (3, b'Hot Packed/Heat Treated'), (4, b'Low pH, <3.9'), (5, b'COA Salmonella'), (6, b'Spray Dried'), (7, b'Pending'), (8, b'Intermediate Only')], default=7)),
                ('risk_assessment_memo', models.TextField(blank=True)),
                ('discontinued', models.BooleanField(default=False)),
                ('approved', models.BooleanField(default=False)),
                ('sold', models.BooleanField(default=False)),
                ('lastprice', models.DecimalField(blank=True, decimal_places=3, max_digits=7, null=True)),
                ('experimental', models.CharField(blank=True, max_length=50)),
                ('lastspdate', models.DateTimeField(blank=True, default=datetime.datetime.now)),
                ('valid', models.BooleanField(default=False)),
                ('kosher', models.CharField(choices=[(b'Not Assigned', b'Not Assigned'), (b'Not Kosher', b'Not Kosher'), (b'All', b'All'), (b'Meat', b'Meat'), (b'Dairy', b'Dairy'), (b'Pareve', b'Pareve'), (b'Passover', b'Passover')], default=b'Not Assigned', max_length=20, verbose_name=b'Kosher')),
                ('kosher_id', models.CharField(blank=True, default=b'', max_length=20, verbose_name=b'Kosher ID')),
                ('halal', models.CharField(choices=[(b'Not Halal', b'Not Halal'), (b'Halal Certified', b'Halal Certified'), (b'Halal Compliant', b'Halal Compliant')], default=b'Not Assigned', max_length=20, verbose_name=b'Halal')),
                ('halal_id', models.CharField(blank=True, default=b'', max_length=20, verbose_name=b'Kosher ID')),
                ('nutri_on_file', models.BooleanField(default=False, verbose_name=b'Nutri On File')),
                ('flammability', models.CharField(blank=True, default=b'', max_length=40)),
                ('vaporpressure', models.DecimalField(decimal_places=2, default=0, max_digits=4)),
                ('pinnumber', models.PositiveIntegerField(blank=True, null=True)),
                ('label_check', models.BooleanField(default=False, verbose_name=b'Ken Label Check')),
                ('ccp1', models.BooleanField(default=True, verbose_name=b'CCP#1 Sieve')),
                ('ccp2', models.BooleanField(default=False, verbose_name=b'CCP#2 Allergen Cleaning')),
                ('ccp3', models.BooleanField(default=False, verbose_name=b'CCP#3 COA Verification')),
                ('ccp4', models.BooleanField(default=False, verbose_name=b'CCP#4 Label Application')),
                ('ccp5', models.BooleanField(default=False, verbose_name=b'CP#5 GMO Non-detect')),
                ('ccp6', models.BooleanField(default=False, verbose_name=b'CCP#6 Thermal Kill Step')),
                ('haccp', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name=b'HACCP')),
                ('batfno', models.CharField(blank=True, default=b'', max_length=50, verbose_name=b'TTB No.')),
                ('microtest', models.CharField(blank=True, default=b'', max_length=4, verbose_name=b'Micro Test')),
                ('quantityperunit', models.PositiveIntegerField(blank=True, null=True)),
                ('supplierid', models.PositiveIntegerField(blank=True, null=True)),
                ('unitsinstock', models.PositiveIntegerField(blank=True, null=True)),
                ('unitsonorder', models.PositiveIntegerField(blank=True, null=True)),
                ('reorderlevel', models.PositiveIntegerField(blank=True, null=True)),
                ('categoryid', models.PositiveIntegerField(blank=True, null=True)),
                ('keywords', models.TextField(blank=True)),
                ('location_code_old', models.CharField(blank=True, default=b'', max_length=20)),
                ('keep_refrigerated', models.BooleanField(default=False, verbose_name=b'Keep Refrigerated')),
            ],
            options={
                'ordering': ['-valid', 'number'],
                'db_table': 'access_integratedproduct',
                'permissions': (('view_flavor', 'Can view flavors'),),
            },
        ),
        migrations.CreateModel(
            name='FlavorCategoryInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ld50', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hazards.HazardCategory')),
                ('flavor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='access.Flavor')),
            ],
        ),
        migrations.CreateModel(
            name='FlavorIterOrder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('flavor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='access.Flavor')),
            ],
        ),
        migrations.CreateModel(
            name='FlavorSpecification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=48)),
                ('specification', models.CharField(max_length=48)),
                ('micro', models.BooleanField(default=False)),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='access.Customer')),
                ('flavor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='access.Flavor')),
                ('replaces', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='access.FlavorSpecification')),
            ],
        ),
        migrations.CreateModel(
            name='Formula',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('acc_flavor', models.PositiveIntegerField()),
                ('acc_ingredient', models.PositiveIntegerField()),
                ('amount', models.DecimalField(decimal_places=3, max_digits=7)),
                ('totalweight', models.DecimalField(decimal_places=3, default=Decimal('0'), max_digits=7)),
                ('flavorextendedprice', models.DecimalField(decimal_places=3, default=Decimal('0'), max_digits=7)),
                ('price', models.DecimalField(decimal_places=3, default=Decimal('0'), max_digits=7)),
                ('discontinued', models.BooleanField(default=False)),
                ('batchamount', models.PositiveIntegerField(default=0)),
                ('machinebatch', models.PositiveIntegerField(default=0)),
                ('rawmaterialcode', models.PositiveIntegerField(default=0)),
                ('flavor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='access.Flavor')),
            ],
            options={
                'ordering': ['acc_flavor'],
                'db_table': 'access_integratedformula',
            },
        ),
        migrations.CreateModel(
            name='FormulaLineItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.DecimalField(decimal_places=3, max_digits=7)),
            ],
        ),
        migrations.CreateModel(
            name='FormulaTree',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lft', models.PositiveSmallIntegerField()),
                ('rgt', models.PositiveSmallIntegerField()),
                ('row_id', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('parent_id', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('weight', models.DecimalField(decimal_places=3, max_digits=7)),
                ('weight_factor', models.DecimalField(decimal_places=15, max_digits=16)),
                ('leaf', models.BooleanField(db_index=True, default=False)),
                ('formula_row', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='access.Formula')),
                ('node_flavor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='access.Flavor')),
            ],
            options={
                'ordering': ['root_flavor', 'lft'],
            },
        ),
        migrations.CreateModel(
            name='GHSPictogram',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pictogram_code', models.CharField(max_length=40)),
                ('pictogram_location', models.CharField(max_length=150)),
                ('flavor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='access.Flavor')),
            ],
        ),
        migrations.CreateModel(
            name='GHSSignalWord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('signal_word', models.CharField(max_length=40)),
                ('flavor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='access.Flavor')),
            ],
        ),
        migrations.CreateModel(
            name='HazardStatement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('statement', models.TextField()),
                ('flavor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='access.Flavor')),
            ],
        ),
        migrations.CreateModel(
            name='Incoming',
            fields=[
                ('incomingid', models.PositiveIntegerField(db_column=b'IncomingID', primary_key=True, serialize=False)),
                ('incdate', models.DateTimeField(db_column=b'IncDate')),
                ('incname', models.CharField(db_column=b'IncName', max_length=50)),
                ('inccompany', models.CharField(db_column=b'IncCompany', max_length=50)),
                ('incid', models.CharField(db_column=b'IncID', max_length=50)),
                ('incmemo', models.TextField(db_column=b'IncMemo')),
            ],
            options={
                'db_table': 'Incoming',
            },
        ),
        migrations.CreateModel(
            name='IndivisibleLeafWeight',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.DecimalField(decimal_places=3, max_digits=7)),
                ('quant_weight', models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('cas', models.CharField(blank=True, default=b'', max_length=20, null=True)),
                ('cas2', models.CharField(blank=True, default=b'', max_length=20, null=True)),
                ('cas2_percentage', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=7, verbose_name=b'CAS 2 Percentage')),
                ('art_nati', models.CharField(choices=[(b'N/A', b'N/A'), (b'Nat', b'Nat'), (b'Art', b'Art'), (b'NFI-N', b'NFI-N'), (b'NFI-A', b'NFI-A'), (b'Nat w/ 0.1% Art Topnote', b'TTB')], db_column=b'ART_NATI', max_length=50)),
                ('kosher', models.CharField(blank=True, choices=[(b'Not Assigned', b'Not Assigned'), (b'Not Kosher', b'Not Kosher'), (b'All', b'All'), (b'Meat', b'Meat'), (b'Dairy', b'Dairy'), (b'Pareve', b'Pareve'), (b'Passover', b'Passover')], db_column=b'KOSHER', max_length=20)),
                ('kosher_code', models.CharField(blank=True, db_column=b'Kosher Code', max_length=50)),
                ('halal', models.CharField(blank=True, choices=[(b'Not Halal', b'Not Halal'), (b'Halal Certified', b'Halal Certified'), (b'Halal Compliant', b'Halal Compliant')], default=None, max_length=20, null=True)),
                ('halal_code', models.CharField(blank=True, max_length=50)),
                ('new_gmo', models.CharField(blank=True, choices=[(b'GMO Free', b'GMO Free'), (b'Genetically Modified', b'Genetically Modified'), (b'GMO Non-Detect', b'GMO Non-Detect')], db_column=b'NEW_GMO', max_length=50, null=True, verbose_name=b'New GMO')),
                ('natural_document_on_file', models.BooleanField(db_column=b'Natural_Document_On_File', default=False)),
                ('allergen', models.CharField(blank=True, db_column=b'Allergen', max_length=100)),
                ('microsensitive', models.CharField(blank=True, db_column=b'Microsensitive', max_length=20, null=True)),
                ('rm_ingredient_statement', models.CharField(blank=True, max_length=200, null=True, verbose_name=b'RM Ingredient Statement')),
                ('country_of_origin', models.CharField(blank=True, max_length=200, null=True)),
                ('eggs', models.BooleanField(default=False, verbose_name=b'Eggs')),
                ('milk', models.BooleanField(default=False, verbose_name=b'Milk')),
                ('soybeans', models.BooleanField(default=False, verbose_name=b'Soybeans')),
                ('peanuts', models.BooleanField(default=False, verbose_name=b'Peanuts')),
                ('fish', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Fish')),
                ('treenuts', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Treenuts')),
                ('crustacean', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Crustacean')),
                ('wheat', models.BooleanField(default=False, verbose_name=b'Wheat')),
                ('sunflower', models.BooleanField(default=False, verbose_name=b'Sunflower')),
                ('sesame', models.BooleanField(default=False, verbose_name=b'Sesame')),
                ('mollusks', models.BooleanField(default=False, verbose_name=b'Mollusks')),
                ('mustard', models.BooleanField(default=False, verbose_name=b'Mustard')),
                ('celery', models.BooleanField(default=False, verbose_name=b'Celery')),
                ('lupines', models.BooleanField(default=False, verbose_name=b'Lupines')),
                ('yellow_5', models.BooleanField(default=False, verbose_name=b'Yellow 5')),
                ('salmonella', models.NullBooleanField(default=False)),
                ('vegan', models.NullBooleanField(default=False)),
                ('organic_compliant', models.NullBooleanField(default=False)),
                ('organic_certified', models.NullBooleanField(default=False)),
                ('barley_gluten', models.BooleanField(default=False, verbose_name=b'Barley Gluten')),
                ('sulfites_ppm', models.PositiveSmallIntegerField(blank=True, default=0, verbose_name=b'Sulfites(PPM)')),
                ('rawmaterialcode', models.PositiveIntegerField(blank=True, db_column=b'RawMaterialCode', default=access.models.get_next_rawmaterialcode, primary_key=True, serialize=False)),
                ('id', models.PositiveIntegerField(db_column=b'ProductID', default=access.models.get_next_rawmaterialcode, verbose_name=b'PIN')),
                ('prefix', models.CharField(blank=True, db_column=b'PREFIX', max_length=60)),
                ('product_name', models.CharField(db_column=b'ProductName', max_length=70)),
                ('part_name2', models.CharField(blank=True, db_column=b'PART_NAME2', max_length=60)),
                ('alternate_name', models.CharField(blank=True, max_length=100, null=True)),
                ('memo', models.TextField(blank=True)),
                ('description', models.CharField(blank=True, db_column=b'DESCRIPT', max_length=60)),
                ('comments', models.TextField(blank=True, db_column=b'COMMENTS', verbose_name=b'Comments (Organoleptics)')),
                ('flavornum', models.IntegerField(blank=True, db_column=b'PRODNUM', null=True)),
                ('discontinued', models.BooleanField(db_column=b'Discontinued', default=False)),
                ('experimental', models.BooleanField(default=False)),
                ('unitprice', models.DecimalField(db_column=b'UnitPrice', decimal_places=3, max_digits=10)),
                ('purchase_price_update', models.DateTimeField(blank=True, db_column=b'LSTPRICDAT', default=datetime.datetime(1990, 1, 1, 0, 0), verbose_name=b'Date of last purchase price update')),
                ('date_ordered', models.DateTimeField(blank=True, db_column=b'Date_Ordered', default=datetime.datetime(1990, 1, 1, 0, 0))),
                ('suppliercode', models.CharField(blank=True, db_column=b'SupplierCode', max_length=50)),
                ('fldr', models.CharField(blank=True, db_column=b'FLDR', max_length=50)),
                ('lastkoshdt', models.DateTimeField(blank=True, db_column=b'LASTKOSHDT', default=datetime.datetime(1990, 1, 1, 0, 0))),
                ('solution', models.DecimalField(blank=True, db_column=b'SOLUTION', decimal_places=3, default=0, max_digits=5)),
                ('solvent', models.CharField(blank=True, db_column=b'SOLVENT', max_length=10)),
                ('fema', models.CharField(blank=True, db_column=b'FEMA', max_length=20)),
                ('sprayed', models.BooleanField(db_column=b'Sprayed', default=False)),
                ('prop65', models.BooleanField(db_column=b'Prop65', default=False)),
                ('nutri', models.BooleanField(db_column=b'Nutri', default=False)),
                ('transfat', models.BooleanField(db_column=b'TransFat', default=False)),
                ('sulfites', models.BooleanField(default=False)),
                ('gluten_ppm', models.PositiveIntegerField(default=0)),
                ('has_allergen_text', models.BooleanField(default=False)),
                ('hazardous', models.BooleanField(default=False)),
                ('package_size', models.DecimalField(decimal_places=2, max_digits=7, verbose_name=b'Package size (lbs)')),
                ('minimum_quantity', models.DecimalField(decimal_places=2, max_digits=7, verbose_name=b'Minimum quantity (lbs)')),
                ('quantity_discount', models.CharField(blank=True, max_length=50)),
                ('fob_point', models.CharField(max_length=50, verbose_name=b'FOB point')),
                ('lead_time', models.CharField(db_column=b'lead_time', max_length=50)),
                ('solubility_memo', models.CharField(blank=True, max_length=50)),
                ('supplier_catalog_number', models.CharField(blank=True, max_length=50)),
                ('inventoryng', models.BooleanField(db_column=b'InventoryNG', default=False)),
                ('kencheck', models.BooleanField(db_column=b'Kencheck', default=False)),
                ('unitsinstock', models.DecimalField(blank=True, db_column=b'UnitsInStock', decimal_places=2, default=0, max_digits=6)),
                ('committed', models.DecimalField(blank=True, db_column=b'COMMITTED', decimal_places=2, default=0, max_digits=6)),
                ('reorderlevel', models.DecimalField(blank=True, db_column=b'ReorderLevel', decimal_places=2, default=0, max_digits=6)),
                ('old_lead_time', models.DecimalField(blank=True, db_column=b'LEAD_TIME', decimal_places=2, default=0, max_digits=6, null=True)),
                ('unitsonorder', models.DecimalField(blank=True, db_column=b'UnitsOnOrder', decimal_places=2, default=0, max_digits=6)),
                ('supplierid', models.PositiveIntegerField(blank=True, db_column=b'SupplierID', default=0)),
                ('inventory', models.DecimalField(decimal_places=4, default=0, max_digits=10)),
                ('latest_retain_pk', models.PositiveIntegerField(blank=True, null=True)),
                ('total_sugars', models.DecimalField(blank=True, decimal_places=3, max_digits=7, null=True, verbose_name=b'Total Sugars')),
                ('added_sugars', models.DecimalField(blank=True, decimal_places=3, max_digits=7, null=True, verbose_name=b'Added Sugars')),
                ('hazards_approved', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['id'],
                'db_table': 'access_ingredient',
                'permissions': (('changeprice_ingredient', 'Can change the price of raw materials'), ('view_ingredient', 'Can view ingredients')),
            },
        ),
        migrations.CreateModel(
            name='IngredientInventoryLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=datetime.date.today)),
                ('delta', models.DecimalField(decimal_places=4, max_digits=10)),
                ('comment', models.CharField(blank=True, max_length=255, null=True)),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
        ),
        migrations.CreateModel(
            name='IngredientStatement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('verified', models.BooleanField(default=False)),
                ('edited', models.BooleanField(default=False)),
                ('extracted_from_spec_sheet', models.BooleanField(default=True)),
                ('ingredient_statement', models.CharField(blank=True, max_length=1000, null=True)),
                ('flavor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='access.Flavor')),
            ],
        ),
        migrations.CreateModel(
            name='IngredientTemp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cas', models.CharField(blank=True, default=b'', max_length=20, null=True)),
                ('cas2', models.CharField(blank=True, default=b'', max_length=20, null=True)),
                ('cas2_percentage', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=7, verbose_name=b'CAS 2 Percentage')),
                ('art_nati', models.CharField(choices=[(b'N/A', b'N/A'), (b'Nat', b'Nat'), (b'Art', b'Art'), (b'NFI-N', b'NFI-N'), (b'NFI-A', b'NFI-A'), (b'Nat w/ 0.1% Art Topnote', b'TTB')], db_column=b'ART_NATI', max_length=50)),
                ('kosher', models.CharField(blank=True, choices=[(b'Not Assigned', b'Not Assigned'), (b'Not Kosher', b'Not Kosher'), (b'All', b'All'), (b'Meat', b'Meat'), (b'Dairy', b'Dairy'), (b'Pareve', b'Pareve'), (b'Passover', b'Passover')], db_column=b'KOSHER', max_length=20)),
                ('kosher_code', models.CharField(blank=True, db_column=b'Kosher Code', max_length=50)),
                ('halal', models.CharField(blank=True, choices=[(b'Not Halal', b'Not Halal'), (b'Halal Certified', b'Halal Certified'), (b'Halal Compliant', b'Halal Compliant')], default=None, max_length=20, null=True)),
                ('halal_code', models.CharField(blank=True, max_length=50)),
                ('new_gmo', models.CharField(blank=True, choices=[(b'GMO Free', b'GMO Free'), (b'Genetically Modified', b'Genetically Modified'), (b'GMO Non-Detect', b'GMO Non-Detect')], db_column=b'NEW_GMO', max_length=50, null=True, verbose_name=b'New GMO')),
                ('natural_document_on_file', models.BooleanField(db_column=b'Natural_Document_On_File', default=False)),
                ('allergen', models.CharField(blank=True, db_column=b'Allergen', max_length=100)),
                ('microsensitive', models.CharField(blank=True, db_column=b'Microsensitive', max_length=20, null=True)),
                ('rm_ingredient_statement', models.CharField(blank=True, max_length=200, null=True, verbose_name=b'RM Ingredient Statement')),
                ('country_of_origin', models.CharField(blank=True, max_length=200, null=True)),
                ('eggs', models.BooleanField(default=False, verbose_name=b'Eggs')),
                ('milk', models.BooleanField(default=False, verbose_name=b'Milk')),
                ('soybeans', models.BooleanField(default=False, verbose_name=b'Soybeans')),
                ('peanuts', models.BooleanField(default=False, verbose_name=b'Peanuts')),
                ('fish', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Fish')),
                ('treenuts', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Treenuts')),
                ('crustacean', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Crustacean')),
                ('wheat', models.BooleanField(default=False, verbose_name=b'Wheat')),
                ('sunflower', models.BooleanField(default=False, verbose_name=b'Sunflower')),
                ('sesame', models.BooleanField(default=False, verbose_name=b'Sesame')),
                ('mollusks', models.BooleanField(default=False, verbose_name=b'Mollusks')),
                ('mustard', models.BooleanField(default=False, verbose_name=b'Mustard')),
                ('celery', models.BooleanField(default=False, verbose_name=b'Celery')),
                ('lupines', models.BooleanField(default=False, verbose_name=b'Lupines')),
                ('yellow_5', models.BooleanField(default=False, verbose_name=b'Yellow 5')),
                ('salmonella', models.NullBooleanField(default=False)),
                ('vegan', models.NullBooleanField(default=False)),
                ('organic_compliant', models.NullBooleanField(default=False)),
                ('organic_certified', models.NullBooleanField(default=False)),
                ('barley_gluten', models.BooleanField(default=False, verbose_name=b'Barley Gluten')),
                ('sulfites_ppm', models.PositiveSmallIntegerField(blank=True, default=0, verbose_name=b'Sulfites(PPM)')),
                ('temp_rmcode', models.PositiveIntegerField(blank=True, null=True)),
                ('log_rms', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, default=b'', max_length=25, null=True), blank=True, default=[], null=True, size=None)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='JIList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('a', models.PositiveIntegerField(db_index=True)),
                ('b', models.PositiveIntegerField(db_index=True)),
                ('score', models.FloatField()),
            ],
            options={
                'ordering': ['-score', 'a'],
            },
        ),
        migrations.CreateModel(
            name='KosherGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kosher_group', models.CharField(blank=True, max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='LeafWeight',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.DecimalField(decimal_places=3, max_digits=7)),
                ('quant_weight', models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='LegacyPurchase',
            fields=[
                ('poentry', models.PositiveIntegerField(db_column=b'POEntry', default=access.models.legacy_purchase_auto_number, primary_key=True, serialize=False)),
                ('shipperid', models.PositiveIntegerField(blank=True, db_column=b'ShipperID', null=True)),
                ('shiptoid', models.PositiveIntegerField(blank=True, db_column=b'ShipToID', null=True)),
                ('suppliercode', models.CharField(blank=True, db_column=b'SupplierCode', max_length=50, null=True)),
                ('orderid', models.PositiveIntegerField(blank=True, db_column=b'OrderID', default=0, null=True)),
                ('rawmaterialcode', models.PositiveIntegerField(blank=True, db_column=b'RawMaterialCode', null=True)),
                ('dateordered', models.DateField(blank=True, db_column=b'DateOrdered', null=True)),
                ('datereceived', models.DateField(blank=True, db_column=b'DateReceived', null=True)),
                ('pomemo', models.TextField(blank=True, db_column=b'POMemo', default=b' ALL KOSHER PRODUCTS MUST ARRIVE PER YOUR KOSHER CERTIFICATE OR THEY WILL BE REJECTED.', null=True)),
                ('ponumber', models.PositiveIntegerField(blank=True, db_column=b'PONumber', null=True)),
                ('poquantity', models.DecimalField(blank=True, db_column=b'POQuantity', decimal_places=2, max_digits=7, null=True)),
                ('poduedate', models.DateField(blank=True, db_column=b'PODueDate', null=True)),
                ('packagesize', models.DecimalField(db_column=b'PackageSize', decimal_places=3, max_digits=7)),
                ('pomemo2', models.TextField(blank=True, db_column=b'POMEMO2', default=b'C OF A MUST ACCOMPANY SHIPMENT OR BE FAXED PRIOR TO RECEIVING ITEM', null=True)),
            ],
            options={
                'ordering': ['ponumber'],
                'db_table': 'Purchases',
            },
        ),
        migrations.CreateModel(
            name='LocationCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location_code', models.CharField(max_length=20)),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
        ),
        migrations.CreateModel(
            name='MagentoFlavor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sku', models.CharField(blank=True, max_length=20)),
                ('description', models.TextField(blank=True)),
                ('price', models.CharField(blank=True, max_length=10)),
                ('short_description', models.TextField(blank=True)),
                ('flavor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='access.Flavor')),
            ],
        ),
        migrations.CreateModel(
            name='NutriInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Shrt_Desc', models.TextField()),
                ('Trans_Fat', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Trans Fat')),
                ('Water', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('Calories', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('Protein', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('TotalFat', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Other Fat')),
                ('FA_Sat', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Saturated Fat')),
                ('FA_Mono', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Monounsaturated Fat')),
                ('FA_Poly', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Polyunsaturated Fat')),
                ('Carbohydrt', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Carbohydrates')),
                ('Fiber_TD', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Dietary Fiber')),
                ('Ash', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('Calcium', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('Phosphorus', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('Iron', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('Sodium', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('Potassium', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('Magnesium', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('Zinc', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('Copper', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('Manganese', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('Selenium', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('Vit_A', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Vitamin A')),
                ('Vit_E', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Vitamin E')),
                ('Thiamin', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('Riboflavin', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('Niacin', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('Panto_acid', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Pantothenic Acid')),
                ('Vit_B6', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Vitamin B6')),
                ('Folate', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('Vit_B12', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Vitamin B12')),
                ('Vit_C', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Vitamin C')),
                ('Cholestrl', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Cholesterol')),
                ('GmWt_1', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('GmWt_Desc1', models.TextField()),
                ('GmWt_2', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('GmWt_Desc2', models.TextField()),
                ('Refuse_Pct', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('WaterAmount', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('AlcoholContent', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Alcohol Content')),
                ('ethyl', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Ethyl Alcohol')),
                ('fusel', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Fusel Oil')),
                ('pg', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Propylene Glycol')),
                ('tri_citrate', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Triethyl Citrate')),
                ('glycerin', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Glycerin')),
                ('triacetin', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Triacetin')),
                ('FlavorContent', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Flavor Content')),
                ('Added_Sugars', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('Sugars', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('Vit_D', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Vitamin D')),
                ('Sugar_Alcohols', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NutriInfoTemp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Shrt_Desc', models.TextField()),
                ('Trans_Fat', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Trans Fat')),
                ('Water', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('Calories', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('Protein', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('TotalFat', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Other Fat')),
                ('FA_Sat', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Saturated Fat')),
                ('FA_Mono', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Monounsaturated Fat')),
                ('FA_Poly', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Polyunsaturated Fat')),
                ('Carbohydrt', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Carbohydrates')),
                ('Fiber_TD', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Dietary Fiber')),
                ('Ash', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('Calcium', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('Phosphorus', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('Iron', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('Sodium', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('Potassium', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('Magnesium', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('Zinc', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('Copper', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('Manganese', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('Selenium', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('Vit_A', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Vitamin A')),
                ('Vit_E', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Vitamin E')),
                ('Thiamin', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('Riboflavin', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('Niacin', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('Panto_acid', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Pantothenic Acid')),
                ('Vit_B6', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Vitamin B6')),
                ('Folate', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('Vit_B12', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Vitamin B12')),
                ('Vit_C', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Vitamin C')),
                ('Cholestrl', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Cholesterol')),
                ('GmWt_1', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('GmWt_Desc1', models.TextField()),
                ('GmWt_2', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('GmWt_Desc2', models.TextField()),
                ('Refuse_Pct', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('WaterAmount', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('AlcoholContent', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Alcohol Content')),
                ('ethyl', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Ethyl Alcohol')),
                ('fusel', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Fusel Oil')),
                ('pg', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Propylene Glycol')),
                ('tri_citrate', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Triethyl Citrate')),
                ('glycerin', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Glycerin')),
                ('triacetin', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Triacetin')),
                ('FlavorContent', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Flavor Content')),
                ('Added_Sugars', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('Sugars', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
                ('Vit_D', models.DecimalField(decimal_places=3, default=0, max_digits=11, verbose_name=b'Vitamin D')),
                ('Sugar_Alcohols', models.DecimalField(decimal_places=3, default=0, max_digits=11)),
            ],
        ),
        migrations.CreateModel(
            name='PrecautionaryStatement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=40)),
                ('statement', models.TextField()),
                ('flavor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='access.Flavor')),
            ],
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='PurchaseOrder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveIntegerField(blank=True, default=access.models.next_po_number)),
                ('date_ordered', models.DateField(auto_now_add=True)),
                ('memo', models.TextField(blank=True, default=b' ALL KOSHER PRODUCTS MUST ARRIVE PER YOUR KOSHER CERTIFICATE OR THEY WILL BE REJECTED.')),
                ('memo2', models.TextField(blank=True, default=b'C OF A MUST ACCOMPANY SHIPMENT OR BE FAXED PRIOR TO RECEIVING ITEM')),
                ('due_date', models.DateField(default=access.models.seven_days_from_now)),
                ('receive_date', models.DateField(blank=True, null=True)),
                ('qc_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-date_ordered'],
            },
        ),
        migrations.CreateModel(
            name='PurchaseOrderLineItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('memo', models.TextField(blank=True)),
                ('memo2', models.TextField(blank=True)),
                ('quantity', models.DecimalField(decimal_places=2, default=0, max_digits=7)),
                ('due_date', models.DateField(default=access.models.seven_days_from_now)),
                ('package_size', models.DecimalField(decimal_places=3, default=0, max_digits=7)),
                ('purchase_price', models.DecimalField(decimal_places=3, default=0, max_digits=10)),
                ('closed', models.BooleanField(default=False)),
                ('legacy_purchase', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='access.LegacyPurchase')),
                ('po', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='access.PurchaseOrder')),
            ],
            options={
                'ordering': ['po__number'],
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_type', models.CharField(choices=[(b'gbpp', b'Glass and Brittle Plastic Policy'), (b'wiki', b'Wiki Review'), (b'hazcom', b'Hazcom 2012 SDS Training'), (b'handbook', b'Employee Handbook Confirmation'), (b'colorblind', b'Color Blind Test'), (b'fooddefense', b'Food Defense Plan Training'), (b'facemask', b'Face Mask Fit Test'), (b'sensory', b'Sensory Evaluation Training'), (b'ccp', b'CCP and Allergen HACCP Questionaire'), (b'osha', b'OSHA Lockout Tagout'), (b'firedrill', b'Fire Drill'), (b'fltv', b'Forklift Training Video'), (b'fltdt', b'Forklift Drivers Test'), (b'wpsafety', b'Workplace Safety'), (b'bacteria', b'Bacteria Review'), (b'foodborne', b'Foodborne Illness Review'), (b'personalhygiene', b'Personal Hygiene Review'), (b'haccp', b'HACCP Review'), (b'sanitation', b'Sanitation Review'), (b'time', b'Time and Temperature Controls Review'), (b'foreign', b'Foreign Material Detection Review'), (b'cross', b'Cross Contamination Review'), (b'allergens', b'Allergens Review'), (b'pest', b'Pest Control Review'), (b'security', b'Security Review'), (b'survey', b'Food Safety Survey')], default=b'', max_length=30)),
                ('question', models.CharField(default=b'', max_length=500)),
                ('questions', models.CharField(default=b'', max_length=2000)),
                ('answer_options', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, default=b'', max_length=2000), blank=True, default=[], null=True, size=None)),
                ('spanish_version', models.BooleanField(default=False)),
                ('correct_answer', models.CharField(default=b'', max_length=2000)),
            ],
        ),
        migrations.CreateModel(
            name='ReconciledFlavor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reconciled', models.BooleanField(default=False)),
                ('scraped_data', models.TextField()),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('flavor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='access.Flavor')),
                ('reconciled_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Renumber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('a', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='renum_a_set', to='access.Flavor')),
                ('b', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='renum_b_set', to='access.Flavor')),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='access.Customer')),
            ],
        ),
        migrations.CreateModel(
            name='RMHazardStatement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('statement', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='RMPictogram',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pictogram_code', models.CharField(max_length=40)),
                ('pictogram_location', models.CharField(max_length=150)),
            ],
        ),
        migrations.CreateModel(
            name='RMPrecautionaryStatement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=40)),
                ('statement', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='RMSignalWord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('signal_word', models.CharField(max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name='Shipper',
            fields=[
                ('shipperid', models.PositiveIntegerField(db_column=b'ShipperID', primary_key=True, serialize=False)),
                ('shipper_name', models.CharField(db_column=b'Shipper Name', max_length=40)),
                ('phone', models.CharField(db_column=b'Phone', max_length=24)),
            ],
            options={
                'db_table': 'Shippers',
            },
        ),
        migrations.CreateModel(
            name='ShipTo',
            fields=[
                ('shiptoid', models.PositiveIntegerField(db_column=b'ShipToID', primary_key=True, serialize=False)),
                ('shiptoaddress', models.CharField(db_column=b'ShipToAddress', max_length=50)),
                ('shiptocontact', models.CharField(db_column=b'ShipToContact', max_length=50)),
                ('shiptocity', models.CharField(db_column=b'ShipToCity', max_length=50)),
                ('shiptoregion', models.CharField(db_column=b'ShipToRegion', max_length=50)),
                ('shiptopostalcode', models.CharField(db_column=b'ShipToPostalCode', max_length=50)),
                ('shiptocountry', models.CharField(db_column=b'ShipToCountry', max_length=50)),
                ('shiptophone', models.CharField(db_column=b'ShipToPhone', max_length=50)),
                ('shiptofax', models.CharField(db_column=b'ShipToFax', max_length=50)),
                ('shiptocontacttitle', models.CharField(db_column=b'ShipToContactTitle', max_length=50)),
                ('shiptoname', models.CharField(db_column=b'ShipToName', max_length=50)),
            ],
            options={
                'db_table': 'ShipTo',
            },
        ),
        migrations.CreateModel(
            name='SpecSheetInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_path', models.CharField(blank=True, max_length=1000, null=True)),
                ('date', models.DateField(blank=True, null=True, verbose_name=b'Date')),
                ('supercedes', models.CharField(blank=True, max_length=100, null=True)),
                ('product_name', models.CharField(blank=True, max_length=100, null=True)),
                ('product_number', models.CharField(blank=True, max_length=100, null=True)),
                ('specification_code', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Specification Code')),
                ('solubility', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Solubility')),
                ('specific_gravity', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Specific Gravity')),
                ('flash_point', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Flash Point')),
                ('sieve', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Sieve')),
                ('moisture', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Moisture')),
                ('fat_content', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Fat Content')),
                ('salt_content', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Salt Content')),
                ('brix', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Brix')),
                ('bostwick_consistometer', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Bostwick Consistometer')),
                ('ph', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'PH Level')),
                ('water_activity', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Water Activity')),
                ('aerobic_plate_count', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Aerobic Plate Count')),
                ('escherichia_coli', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Escherichia Coli')),
                ('salmonella', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Salmonella')),
                ('yeast', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Yeast')),
                ('mold', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Mold')),
                ('listeria', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Listeria')),
                ('staphylococci', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Staphylococci')),
                ('coliforms', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Coliforms')),
                ('standard_plate_count', models.CharField(blank=True, max_length=100, null=True, verbose_name=b'Standard Plate Count')),
                ('description', models.CharField(blank=True, max_length=1000, null=True, verbose_name=b'Description')),
                ('ingredient_statement', models.CharField(blank=True, max_length=1000, null=True, verbose_name=b'Ingredient Statement')),
                ('shelf_life', models.CharField(blank=True, max_length=1000, null=True, verbose_name=b'Shelf Life')),
                ('storage', models.CharField(blank=True, max_length=1000, null=True, verbose_name=b'Storage')),
                ('flavor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='access.Flavor')),
                ('one_off_customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='access.Customer')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('id', models.PositiveIntegerField(db_column=b'ID', default=access.models.next_id, primary_key=True, serialize=False)),
                ('suppliercode', models.CharField(blank=True, db_column=b'SupplierCode', max_length=255)),
                ('suppliername', models.CharField(db_column=b'SupplierName', max_length=255)),
                ('contactname', models.CharField(blank=True, db_column=b'ContactName', max_length=255)),
                ('contacttitle', models.CharField(blank=True, db_column=b'ContactTitle', max_length=255)),
                ('address', models.CharField(blank=True, db_column=b'Address', max_length=255)),
                ('city', models.CharField(blank=True, db_column=b'City', max_length=255)),
                ('region', models.CharField(blank=True, db_column=b'Region', max_length=255)),
                ('postalcode', models.CharField(blank=True, db_column=b'PostalCode', max_length=255)),
                ('country', models.CharField(blank=True, db_column=b'Country', max_length=255)),
                ('phone', models.CharField(blank=True, db_column=b'Phone', max_length=255)),
                ('fax', models.CharField(db_column=b'Fax', max_length=255)),
                ('supplierid', models.PositiveIntegerField(blank=True, db_column=b'SupplierID', null=True)),
                ('rawmaterialcode', models.PositiveIntegerField(blank=True, db_column=b'RawMaterialCode', null=True)),
                ('homepage', models.CharField(blank=True, db_column=b'HomePage', max_length=255)),
                ('email', models.CharField(blank=True, db_column=b'EMail', max_length=255)),
            ],
            options={
                'ordering': ['suppliername'],
                'db_table': 'Suppliers',
            },
        ),
        migrations.CreateModel(
            name='Training',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_type', models.CharField(choices=[(b'gbpp', b'Glass and Brittle Plastic Policy'), (b'wiki', b'Wiki Review'), (b'hazcom', b'Hazcom 2012 SDS Training'), (b'handbook', b'Employee Handbook Confirmation'), (b'colorblind', b'Color Blind Test'), (b'fooddefense', b'Food Defense Plan Training'), (b'facemask', b'Face Mask Fit Test'), (b'sensory', b'Sensory Evaluation Training'), (b'ccp', b'CCP and Allergen HACCP Questionaire'), (b'osha', b'OSHA Lockout Tagout'), (b'firedrill', b'Fire Drill'), (b'fltv', b'Forklift Training Video'), (b'fltdt', b'Forklift Drivers Test'), (b'wpsafety', b'Workplace Safety'), (b'bacteria', b'Bacteria Review'), (b'foodborne', b'Foodborne Illness Review'), (b'personalhygiene', b'Personal Hygiene Review'), (b'haccp', b'HACCP Review'), (b'sanitation', b'Sanitation Review'), (b'time', b'Time and Temperature Controls Review'), (b'foreign', b'Foreign Material Detection Review'), (b'cross', b'Cross Contamination Review'), (b'allergens', b'Allergens Review'), (b'pest', b'Pest Control Review'), (b'security', b'Security Review'), (b'survey', b'Food Safety Survey')], default=b'', max_length=30)),
                ('completion_date', models.DateField(blank=True, default=datetime.date.today, null=True)),
                ('complete', models.BooleanField(default=False)),
                ('passed', models.BooleanField(default=False)),
                ('tester', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TSR',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_in', models.DateField(default=datetime.date.today)),
                ('number', models.PositiveIntegerField(unique=True)),
                ('date_out', models.DateField(blank=True, null=True)),
                ('shipping_method', models.CharField(choices=[(b'red', b'UPS Red'), (b'blue', b'UPS Blue'), (b'orange', b'UPS Orange'), (b'ground', b'UPS Ground'), (b'international', b'International')], max_length=20)),
                ('contact', models.CharField(max_length=40)),
                ('title', models.CharField(blank=True, max_length=40)),
                ('telephone', models.CharField(max_length=20)),
                ('country', models.CharField(blank=True, max_length=30)),
                ('email', models.CharField(max_length=50)),
                ('deadline', models.DateField(blank=True, null=True)),
                ('kosher_parve', models.BooleanField(default=False)),
                ('kosher_dairy', models.BooleanField(default=False)),
                ('usda', models.BooleanField(default=False, verbose_name=b'USDA')),
                ('msds', models.BooleanField(default=False, verbose_name=b'MSDS')),
                ('specs', models.BooleanField(default=False)),
                ('cont_guar', models.BooleanField(default=False)),
                ('finished_product', models.BooleanField(default=False)),
                ('liquid', models.BooleanField(default=False)),
                ('dry', models.BooleanField(default=False)),
                ('emulsion', models.BooleanField(default=False)),
                ('natural', models.BooleanField(default=False)),
                ('wonf', models.BooleanField(default=False)),
                ('NA', models.BooleanField(default=False)),
                ('artificial', models.BooleanField(default=False)),
                ('organic_comp', models.BooleanField(default=False)),
                ('oil', models.BooleanField(default=False)),
                ('water', models.BooleanField(default=False)),
                ('coffee', models.BooleanField(default=False)),
                ('tea', models.BooleanField(default=False)),
                ('nopg', models.BooleanField(default=False)),
                ('prop65', models.BooleanField(default=False)),
                ('nodiacetyl', models.BooleanField(default=False)),
                ('overseas', models.BooleanField(default=False)),
                ('max_price', models.DecimalField(decimal_places=2, max_digits=7)),
                ('lbs_per_year', models.PositiveIntegerField()),
                ('exposed_to_heat', models.BooleanField(default=False)),
                ('temperature', models.DecimalField(blank=True, decimal_places=3, max_digits=5, null=True)),
                ('minutes', models.PositiveIntegerField(blank=True, null=True)),
                ('japan', models.BooleanField(default=False)),
                ('whole_foods', models.BooleanField(default=False)),
                ('lab_select', models.BooleanField(default=False)),
                ('description', models.TextField(max_length=200, verbose_name=b'Project Description')),
                ('assigned_to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assigned_TSRs', to=settings.AUTH_USER_MODEL)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='access.Customer')),
                ('entered_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entered_TSRs', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TSRLineItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('code', models.PositiveIntegerField()),
                ('usage', models.TextField(blank=True)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('tsr', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='access.TSR')),
            ],
        ),
        migrations.CreateModel(
            name='FEMAIngredient',
            fields=[
                ('ingredient_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='access.Ingredient')),
            ],
            options={
                'abstract': False,
            },
            bases=('access.ingredient',),
        ),
        migrations.CreateModel(
            name='Solvent',
            fields=[
                ('ingredient', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='solvent_listing', serialize=False, to='access.Ingredient')),
            ],
        ),
        migrations.AddField(
            model_name='rmsignalword',
            name='ingredient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='access.Ingredient'),
        ),
        migrations.AddField(
            model_name='rmprecautionarystatement',
            name='ingredient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='access.Ingredient'),
        ),
        migrations.AddField(
            model_name='rmpictogram',
            name='ingredient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='access.Ingredient'),
        ),
        migrations.AddField(
            model_name='rmhazardstatement',
            name='ingredient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='access.Ingredient'),
        ),
        migrations.AddField(
            model_name='purchaseorderlineitem',
            name='raw_material',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='access.Ingredient'),
        ),
        migrations.AddField(
            model_name='purchaseorder',
            name='ship_to',
            field=models.ForeignKey(default=access.models.get_default_ship_to, on_delete=django.db.models.deletion.CASCADE, to='access.ShipTo'),
        ),
        migrations.AddField(
            model_name='purchaseorder',
            name='shipper',
            field=models.ForeignKey(default=38, on_delete=django.db.models.deletion.CASCADE, to='access.Shipper'),
        ),
        migrations.AddField(
            model_name='purchaseorder',
            name='supplier',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='access.Supplier'),
        ),
        migrations.AddField(
            model_name='nutriinfotemp',
            name='ingredient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='access.Ingredient'),
        ),
        migrations.AddField(
            model_name='nutriinfotemp',
            name='user',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='nutriinfo',
            name='ingredient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='access.Ingredient'),
        ),
        migrations.AddField(
            model_name='leafweight',
            name='ingredient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='access.Ingredient'),
        ),
        migrations.AddField(
            model_name='leafweight',
            name='root_flavor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leaf_weights', to='access.Flavor'),
        ),
        migrations.AddField(
            model_name='ingredientinventorylog',
            name='ingredient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='access.Ingredient'),
        ),
        migrations.AddField(
            model_name='ingredient',
            name='hazard_set',
            field=models.ManyToManyField(through='access.FDIIngredientCategoryInfo', to='hazards.HazardCategory'),
        ),
        migrations.AddField(
            model_name='ingredient',
            name='sub_flavor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='gazinta', to='access.Flavor'),
        ),
        migrations.AddField(
            model_name='ingredient',
            name='supplier',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='access.Supplier'),
        ),
        migrations.AddField(
            model_name='indivisibleleafweight',
            name='ingredient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='access.Ingredient'),
        ),
        migrations.AddField(
            model_name='indivisibleleafweight',
            name='root_flavor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='indivisible_leaf_weights', to='access.Flavor'),
        ),
        migrations.AddField(
            model_name='formulatree',
            name='node_ingredient',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='access.Ingredient'),
        ),
        migrations.AddField(
            model_name='formulatree',
            name='root_flavor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='formula_rows', to='access.Flavor'),
        ),
        migrations.AddField(
            model_name='formulalineitem',
            name='ingredient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='access.Ingredient'),
        ),
        migrations.AddField(
            model_name='formula',
            name='ingredient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='access.Ingredient'),
        ),
        migrations.AddField(
            model_name='flavor',
            name='hazard_set',
            field=models.ManyToManyField(through='access.FlavorCategoryInfo', to='hazards.HazardCategory'),
        ),
        migrations.AddField(
            model_name='flavor',
            name='ingredients',
            field=models.ManyToManyField(through='access.Formula', to='access.Ingredient'),
        ),
        migrations.AddField(
            model_name='flavor',
            name='renumber_of',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='renumbers', to='access.Flavor'),
        ),
        migrations.AddField(
            model_name='fdiingredientcategoryinfo',
            name='ingredient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='access.Ingredient'),
        ),
        migrations.AddField(
            model_name='experimentallog',
            name='flavor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='experimental_log', to='access.Flavor'),
        ),
        migrations.AddField(
            model_name='experimentallog',
            name='ingredients',
            field=models.ManyToManyField(through='access.ExperimentalFormula', to='access.Ingredient'),
        ),
        migrations.AddField(
            model_name='experimentalformula',
            name='experimental_log',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='access.ExperimentalLog'),
        ),
        migrations.AddField(
            model_name='experimentalformula',
            name='ingredient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='access.Ingredient'),
        ),
        migrations.AddField(
            model_name='documentverification',
            name='temp_ingredient',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='access.IngredientTemp'),
        ),
        migrations.AddField(
            model_name='documentverification',
            name='temp_nutri',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='access.NutriInfoTemp'),
        ),
        migrations.AddField(
            model_name='documentverification',
            name='verifier',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='documents',
            name='rawmaterial',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='access.Ingredient'),
        ),
        migrations.AddField(
            model_name='documents',
            name='uploader',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='digitizedformula',
            name='experimental_log',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='access.ExperimentalLog'),
        ),
        migrations.AddField(
            model_name='coa',
            name='flavor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='access.Flavor'),
        ),
        migrations.AddField(
            model_name='coa',
            name='line',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='salesorders.LineItem'),
        ),
        migrations.AddField(
            model_name='coa',
            name='lot',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lot', to='newqc.Lot'),
        ),
        migrations.AddField(
            model_name='coa',
            name='one_off_customer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='access.Customer'),
        ),
        migrations.AddField(
            model_name='coa',
            name='origin_lot',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='origin_lot', to='newqc.Lot'),
        ),
        migrations.AddField(
            model_name='coa',
            name='sp',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='access.SpecSheetInfo'),
        ),
        migrations.AddField(
            model_name='answer',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_question', to='access.Question'),
        ),
        migrations.CreateModel(
            name='AllerIngredients',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('access.ingredient',),
        ),
        migrations.CreateModel(
            name='FlavorRiskAssessment',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('access.flavor',),
        ),
        migrations.CreateModel(
            name='IngredientDescription',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('access.ingredient',),
        ),
        migrations.AlterUniqueTogether(
            name='nutriinfotemp',
            unique_together=set([('user', 'ingredient')]),
        ),
        migrations.AlterUniqueTogether(
            name='ingredienttemp',
            unique_together=set([('user', 'temp_rmcode')]),
        ),
    ]
